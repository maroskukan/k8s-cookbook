---
- hosts: localhost
  gather_facts: false

  vars:
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
    docker_tls_verify: '1'
    docker_cert_path: 'C:\Users\maros_kukan\.minikube\certs'
    image_name: hello-go
    replicas: 1
    app_state: present

  pre_tasks:
    - block:
        - name: Check Minikube's status.
          command: minikube status
          register: minikube_status
          changed_when: false
          ignore_errors: true

        - name: Start Minikube if it's not running.
          command: minikube start
          when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"

        - name: Retrieve Minikube IP address.
          command: minikube ip
          register: minikube_ip
          changed_when: false
          ignore_errors: true

        - name: Retrieve Minikube WSL cert path.
          command: wslpath "{{ docker_cert_path }}"
          register: docker_wsl_cert_path
          changed_when: false
          ignore_errors: true
      when: app_state == 'present'

  tasks:
    - block:
        - name: Updating docker daemon configuration.
          set_fact:
            docker_host: "tcp://{{ minikube_ip.stdout }}:2376"

        - name: Get exisitng image hash.
          shell: |
            docker images -q {{ image_name }}
          register: image_hash
          changed_when: false
          environment:
            DOCKER_HOST: "{{ docker_host }}"
            DOCKER_TLS_VERIFY: "{{ docker_tls_verify }}"
            DOCKER_CERT_PATH: "{{ docker_wsl_cert_path.stdout }}"

        - name: Build image if it's not already built.
          shell: |
            docker build -t {{ image_name }} ../hello-go
          when: not image_hash.stdout
          environment:
            DOCKER_HOST: "{{ docker_host }}"
            DOCKER_TLS_VERIFY: "{{ docker_tls_verify }}"
            DOCKER_CERT_PATH: "{{ docker_wsl_cert_path.stdout }}"
      when: app_state == 'present'

    - name: Manage Deployment for Hello Go.
      k8s:
        state: "{{ app_state }}"
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: hello-go
            namespace: default
          spec:
            replicas: "{{ replicas }}"
            selector:
              matchLabels:
                app: hello-go
            template:
              metadata:
                labels:
                  app: hello-go
              spec:
                containers:
                  - name: hello-go
                    image: "{{ image_name }}"
                    imagePullPolicy: IfNotPresent
                    ports:
                      - containerPort: 8180

    - name: Manage a Service for Hello Go.
      k8s:
        state: "{{ app_state }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: hello-go
            namespace: default
          spec:
            type: LoadBalancer
            ports:
              - port: 8180
                targetPort: 8180
            selector:
              app: hello-go

  post_tasks:
    - block:
        - name: Expose Hello Go on the host via Minikube.
          command: minikube service hello-go --url=true
          changed_when: false
          register: minikube_service

        - name: Display Hello Go Service URL.
          debug:
            msg: "Hello Go URL: {{ minikube_service['stdout_lines'][0] }}"
      when: app_state == "present"
